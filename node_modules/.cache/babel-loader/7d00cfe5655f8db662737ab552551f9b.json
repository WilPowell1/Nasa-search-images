{"ast":null,"code":"import axios from 'axios';\n\nconst getImages = query => {\n  if (!query) {\n    return Promise.resolve([]);\n  } else {\n    return axios.get(`https://images-api.nasa.gov/search?q=${query}`).then(response => {\n      const imageResults = response.data.collection.items;\n      const parsedImages = imageResults.filter(image => {\n        return image.data[0].media_type === \"image\";\n      });\n      const images = parsedImages.map(image => image.links[0].href);\n      return images;\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n};\n\nexport default getImages;","map":{"version":3,"sources":["/home/wil/McrCodes/Projects/tech-test/src/requests/getImages.js"],"names":["axios","getImages","query","Promise","resolve","get","then","response","imageResults","data","collection","items","parsedImages","filter","image","media_type","images","map","links","href","catch","err","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AACzB,MAAI,CAACA,KAAL,EAAY;AACR,WAAOC,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACH,GAFD,MAEO;AACH,WAAOJ,KAAK,CACTK,GADI,CACC,wCAAuCH,KAAM,EAD9C,EAEJI,IAFI,CAEEC,QAAD,IAAc;AAChB,YAAMC,YAAY,GAAGD,QAAQ,CAACE,IAAT,CAAcC,UAAd,CAAyBC,KAA9C;AAEA,YAAMC,YAAY,GAAGJ,YAAY,CAACK,MAAb,CAAqBC,KAAD,IAAW;AAAC,eAAOA,KAAK,CAACL,IAAN,CAAW,CAAX,EAAcM,UAAd,KAA6B,OAApC;AACtD,OADsB,CAArB;AAGA,YAAMC,MAAM,GAAGJ,YAAY,CAACK,GAAb,CAAiBH,KAAK,IAAIA,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeC,IAAzC,CAAf;AAEA,aAAOH,MAAP;AAEK,KAZJ,EAaJI,KAbI,CAaGC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAfI,CAAP;AAgBD;AACN,CArBD;;AAuBA,eAAepB,SAAf","sourcesContent":["import axios from 'axios';\n\nconst getImages = (query) => {\n    if (!query) {\n        return Promise.resolve([]);\n    } else {\n        return axios\n          .get(`https://images-api.nasa.gov/search?q=${query}`)\n          .then((response) => {\n              const imageResults = response.data.collection.items;\n              \n              const parsedImages = imageResults.filter((image) => {return image.data[0].media_type === \"image\";\n            });\n\n              const images = parsedImages.map(image => image.links[0].href);\n\n              return images;\n\n                  })\n          .catch((err) => {\n            console.log(err);\n          });\n      }\n}\n\nexport default getImages;"]},"metadata":{},"sourceType":"module"}